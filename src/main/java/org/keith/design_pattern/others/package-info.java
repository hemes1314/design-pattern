/**
 * 单一职责原则：一个类，仅有一个原因引起他的变化。
 * 
 * 开放封闭原则:扩展是开放的，修改是封闭的。对于新需求，应该增加新代码完成，而不是修改原先代码。
 *
 * 依赖倒转原则：谁也不要依靠谁，除了约定的接口，都可以灵活自如。 (会修电脑不会修收音机)
 * 			1.细节应该依赖于抽象。（针对接口编程，而不针对实现编程）
 * 			2.高层模块不应该依赖于底层模块，而两者都应该依赖于抽象。
 * 			万物都遵循着某种类似的规律，谁先把握谁就能成为强者。	（而Spring的Ioc是通过配置-Hash-反射实现对象控制（对象的创建和被动接受依赖被容器控制）的反转，Factory的升级）
 * 			依赖倒转是面向对象设计的标志。如果变成过程中面向抽象变成而不是面向细节编程，即所有编程终止于抽象或者接口，则这就是面向对象的设计，反之则不是。
 * 里氏代换原则：子类必须可以替代父类。（例：企鹅子类和会飞的鸟父类就不符合此原则）
 * 迪米特法则：如果两个类不必发生直接通信，那么这两个类就不应当发生直接的相互作用。如果一个类需要调用另一个类的某一个方法，可以通过第三者转发这个调用。
 * 
 * 
 * @date 2016-7-20
 * @author keith
 */
package org.keith.design_pattern.others;